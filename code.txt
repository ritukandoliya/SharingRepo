class Employee {
  
    public int employeeID;
    public String employeeName;
    public String employeeAddress;
  
    // Student class constructor
    Employee(int employeeID, String employeeName, String employeeAddress)
    {
        this.employeeID = employeeID;
        this.employeeName = employeeName;
        this.employeeAddress = employeeAddress;
    }
}

class Merge 
{  
    /* Function to merge the subarrays of arr[] */  
    void merge(Employee arr[], int begin, int middle, int end)    
    {    
        int p, q, r;  
        int n1 = middle - begin + 1;    
        int n2 = end - middle;    
          
       /* temporary Arrays */  
            Employee LeftArray[] = new Employee[n1];  
            Employee RightArray[] = new Employee[n2];  
          
        /* copy data to temp arrays */  
        for (p = 0; p < n1; p++)    
        LeftArray[p] = arr[begin + p];    
        for (q = 0; q < n2; q++)    
        RightArray[q] = arr[middle + 1 + q];    
          
        p = 0; /* initial index of first sub-array */  
        q = 0; /* initial index of second sub-array */   
        r = begin;  /* initial index of merged sub-array */  
          
        while (p < n1 && q < n2)    
        {    
            if(LeftArray[p].employeeID <= RightArray[q].employeeID)    
            {    
                arr[r] = LeftArray[p];    
                p++;    
            }    
            else    
            {    
                arr[r] = RightArray[q];    
                q++;    
            }    
            r++;    
        }    
        while (p<n1)    
        {    
            arr[r] = LeftArray[p];    
            p++;    
            r++;    
        }    
          
        while (q<n2)    
        {    
            arr[r] = RightArray[q];    
            q++;    
            r++;    
        }    
    }    
  
    void mergeSort(Employee arr[], int begin, int end)  
    {  
        if (begin < end)   
        {  
            int middle = (begin + end) / 2;  
            mergeSort(arr, begin, middle);  
            mergeSort(arr, middle + 1, end);  
            merge(arr, begin, middle, end);  
        }  
    }
}

public class Demo {
  
    public static void main(String args[])
    {
  
        // Declaring an array of student
        Employee[] arr;
  
        // Allocating memory for 2 objects
        // of type student
        arr = new Employee[5];
  
        arr[0] = new Employee(1701289270, "Satyabrata", "Demo Address1");
  
        arr[1] = new Employee(1701289219, "Omm Prasad", "Demo Address2");
        
        arr[2] = new Employee(1701289218, "Jai Bhatt", "Demo Address3");
        
        arr[3] = new Employee(1701289221, "Farhan Qureshi", "Demo Address4");
        
        arr[4] = new Employee(1701289213, "Raju Rastogi", "Demo Address5");
        
        
        for(int i=0;i<5;i++)
        {
            System.out.println("Employee name: "+arr[i].employeeID+", Name: "+arr[i].employeeName+", Address: "+ arr[i].employeeAddress);
        }
        
        //bubblesort
        for(int i=0;i<5;i++)
        {
            Employee temp = new Employee(0, "", "");
            for(int j=1;j<(5-i);j++)
            {
                if(arr[j-1].employeeID>arr[j].employeeID)
                {
                    //swapping
                    temp.employeeID = arr[j-1].employeeID;
                    temp.employeeName = arr[j-1].employeeName;
                    temp.employeeAddress = arr[j-1].employeeAddress;
                    
                    arr[j-1].employeeID = arr[j].employeeID;
                    arr[j-1].employeeName = arr[j].employeeName;
                    arr[j-1].employeeAddress = arr[j].employeeAddress;
                    
                    arr[j].employeeID = temp.employeeID;
                    arr[j].employeeName = temp.employeeName;
                    arr[j].employeeAddress = temp.employeeAddress;
                }
            }
        }
        
        System.out.println("After Bubble Sort:");
        for(int i=0;i<5;i++)
        {
            System.out.println("Employee name: "+arr[i].employeeID+", Name: "+arr[i].employeeName+", Address: "+ arr[i].employeeAddress);
        }
        
        
        Merge m1 = new Merge();
        m1.mergeSort(arr,0,5-1);
        
        System.out.println("After Merge Sort:");
        
        for(int i=0;i<5;i++)
        {
            System.out.println("Employee name: "+arr[i].employeeID+", Name: "+arr[i].employeeName+", Address: "+ arr[i].employeeAddress);
        }
    }
}


->Selection Sort<-

class Program4
{
	public static void main(String args[])
	{
		Employee[] arr;
		arr = new Employee[5];

		arr[0]=new Employee(1,"Ritu","Rajkot");
		arr[1]=new Employee(2,"Sakshi","Jamnagar");
		arr[2]=new Employee(13,"Tanvi","Ahemdabad");
		arr[3]=new Employee(4,"Jinkal","Morbi");
		arr[4]=new Employee(15,"Gunjan","Pune");

		for(int i=0;i<4;i++)
		{
			int min=i;
			for(int j=i+1;j<5;j++)
			{
				if(arr[j].employeeId < arr[min].employeeId)
				{
					min=j;
				}
			}
			int temp=arr[min].employeeId;
			arr[min].employeeId=arr[i].employeeId;
			arr[i].employeeId=temp;
		}

		System.out.println("After Bubble Sort: ");

		for(int i=0;i<5;i++)
		{
			System.out.println("Employee Id: "+arr[i].employeeId+" Name: "+arr[i].employeeName+" Address: "+arr[i].employeeAddress);
		} 
	}
}
class Employee
{
	public int employeeId;
	public String employeeName;
	public String employeeAddress;

	Employee(int employeeId,String employeeName,String employeeAddress)
	{
		this.employeeId=employeeId;
		this.employeeName=employeeName;
		this.employeeAddress=employeeAddress;
	}


}
